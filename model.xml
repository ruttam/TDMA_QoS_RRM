<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.

// In this model time is measured in ms,
// it can be further atomized changing the
// unit value, e.g. to 10, 100
int unit = 1000;    // time unit ratio wrt 1 ms

int frame_size = 2 * 1000;    // frame size (ms * unit)

clock frame_clk;    // frame clock timer

int broadcast_channel = 5;    // broadcast channel frequency (?)

int number_BS = 2;    // number of Base Stations
typedef int [0, 2 - 1] BSid_t;

int number_UE = 10;    // number of User Equipment
typedef int [0, 10 - 1] UEid_t;

int number_profiles = 4;
typedef int [0, 4 - 1] profileId_t;

profileId_t profile[UEid_t] = {0, 1, 2, 3, 1, 2, 0, 1, 2, 3};

profileId_t RTa = 0;           // Real-Time Audio
profileId_t HqRTa = 1;         // High-Quality Real-Time Audio
profileId_t sRTa = 2;          // Sporadic Real-Time Audio
profileId_t Listen_Only = 3;   // Listen-Only

// --------------------------------------------------------------------------------------------
// INIT
// --------------------------------------------------------------------------------------------

broadcast chan started[UEid_t];    // UE start signal

int offsets[2][UEid_t] = 
{
    {1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
    {10, 20, 5, 0, 10, 40, 7, 15, 30, 0}
};

int start_offset[UEid_t] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};    // offset of UE start signal

void setOffset(int offset_id)    // setting offset values from possible variations in offsets
{
    for(i: UEid_t) start_offset[i] = offsets[offset_id][i] * unit;
}

// --------------------------------------------------------------------------------------------
// CONNECT
// --------------------------------------------------------------------------------------------

int connection_channel_stability[UEid_t][2] = 
{
    {25, 75},
    {25, 75},
    {25, 75},
    {25, 75},
    {25, 75},
    {25, 75},
    {25, 75},
    {25, 75},
    {25, 75},
    {25, 75}
};

broadcast chan connected[UEid_t];    // UE connected signal

broadcast chan disconnected[UEid_t];    // UE disconnected signal

broadcast chan failed[UEid_t];    // UE signal for failed latency requirements 

int disconnect_timeout = 5000 * 1;    // timeout for disconnect in ms

int RACH_start = 0;    // start time of random access channel in the current frame

int RACH_size = 0;    // sizes of random access channel slot (ms * unit)

chan RACH;    // UE signal to BS through the random access channel in order to connect

UEid_t RACH_id = 0;    // UE id whose 

// --------------------------------------------------------------------------------------------
// LISTEN_ONLY
// --------------------------------------------------------------------------------------------

broadcast chan BCH;    // broadcast channel

broadcast chan sleep[UEid_t];    // UE signal for RF module to sleep

broadcast chan wake_up[UEid_t];    // UE signal for RF module to wake-up

chan UCCH[UEid_t];    // Up-Link control channel

int channel_interference_probability[UEid_t][2] = 
{
    {25, 75},
    {25, 75},
    {25, 75},
    {25, 75},
    {25, 75},
    {25, 75},
    {25, 75},
    {25, 75},
    {25, 75},
    {25, 75}
};

bool ACK[UEid_t] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};    // BS acknowledge of UL transmissions from the UE

int sleep_time[UEid_t] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};    // RRM (Radio Resource Manager) calculated sleep time for UE after receiving UL ACKs

// --------------------------------------------------------------------------------------------
// STREAM
// --------------------------------------------------------------------------------------------

broadcast chan stream[UEid_t];    // UE signal to start audio streaming

broadcast chan sample[UEid_t];    // UE signal to DSP to start audio sampling

broadcast chan stop_sample[UEid_t];    // UE signal to DSP to stop audio sampling (in case of mode changes)

broadcast chan sample_ready[UEid_t];    // UE signal from DSP that a new audio sample is ready loaded in the memory

broadcast chan UTCH[UEid_t];    // up-link UE signal to BS transmitting audio data

int samples_ready[UEid_t] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};    // audio samples ready to be read from memory

int slot_start[UEid_t] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};    // start times of dedicated TCH slots for the nodes in current frame

int slot_size[UEid_t] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};    // sizes of dedicated TCH slots for the nodes in current frame (ms * unit)

int MCS;    // MCS assigned for this PP transmissions

//double dsp_to_qca(){
//    return (frame_size/1000 * audio_data_rate)/uart_speed;
//}

// --------------------------------------------------------------------------------------------
// BASE STATION
// --------------------------------------------------------------------------------------------

chan schedule[BSid_t];    // BS signal to execute radio resource scheduling

chan scheduled[BSid_t];    // RRM signal to BS that scheduling is done

// --------------------------------------------------------------------------------------------
// FRAME SCHEDULING
// --------------------------------------------------------------------------------------------



</declaration>
	<template>
		<name>Scheduler</name>
		<parameter>int id</parameter>
		<location id="id0" x="-569" y="-476">
			<name x="-579" y="-510">INITIAL</name>
		</location>
		<location id="id1" x="-569" y="-331">
			<name x="-595" y="-314">ACTIVE</name>
			<urgent/>
		</location>
		<location id="id2" x="-416" y="-331">
			<urgent/>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-484" y="-416">scheduled[id]!</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-663" y="-416">schedule[id]?</label>
		</transition>
	</template>
	<template>
		<name>BaseStation</name>
		<parameter>int id</parameter>
		<declaration>clock x;

int number_UE = 10;    // supported number of active UE

bool active_UE[UEid_t] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};    // identification of UE that are active

bool listen_only_UE[UEid_t] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};    // identification of UE that are in Listen-Only mode

int UE_CQI[UEid_t] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};    // channel quality indications of all active UE

profileId_t getMode(int slot_id) {
    
    return 0;
}

int number_slots = 1;    // current frame number of slots (initially only one for random access channel)

int slot = 0;    // slot counter during the frame execution

UEid_t current = 0;    // id of current slot's owner (UE)

int rach_mode = 0;    // the last slot in the frame is random access channel

</declaration>
		<location id="id3" x="-374" y="-161">
			<name x="-391" y="-195">INITIAL</name>
		</location>
		<location id="id4" x="-212" y="-76">
			<name x="-263" y="-110">FRAME_READY</name>
		</location>
		<location id="id5" x="-51" y="-76">
			<name x="-34" y="-85">SEND_BCH</name>
			<urgent/>
		</location>
		<location id="id6" x="-51" y="76">
			<label kind="invariant" x="-34" y="51">x &lt;= slot_size[slot]</label>
			<urgent/>
		</location>
		<location id="id7" x="-374" y="-76">
			<name x="-442" y="-85">SETUP</name>
			<label kind="invariant" x="-442" y="-68">x' == 0</label>
			<urgent/>
		</location>
		<location id="id8" x="-170" y="204">
			<name x="-212" y="221">UL_ACK</name>
			<urgent/>
		</location>
		<location id="id9" x="-255" y="76">
			<name x="-289" y="42">UL_NACK</name>
			<urgent/>
		</location>
		<location id="id10" x="-331" y="76">
			<urgent/>
		</location>
		<init ref="id3"/>
		<transition>
			<source ref="id10"/>
			<target ref="id7"/>
			<label kind="guard" x="-527" y="-17">slot == number_slots</label>
			<label kind="assignment" x="-527" y="0">slot = 0,
number_slots = 0,
x = 0</label>
			<nail x="-374" y="76"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id8"/>
			<label kind="guard" x="-51" y="238">slot == rach_mode</label>
			<label kind="synchronisation" x="17" y="255">RACH?</label>
			<label kind="assignment" x="-59" y="272">current = RACH_id</label>
			<nail x="68" y="127"/>
			<nail x="68" y="238"/>
			<nail x="-119" y="238"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id10"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id10"/>
			<label kind="assignment" x="-323" y="178">ACK[current] = 1</label>
			<nail x="-331" y="204"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id6"/>
			<label kind="guard" x="-323" y="-25">slot &lt; number_slots</label>
			<label kind="assignment" x="-323" y="0">slot += 1,
x = 0</label>
			<nail x="-331" y="0"/>
			<nail x="-102" y="0"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id9"/>
			<label kind="guard" x="-204" y="34">x &gt;= slot_size[slot]</label>
			<label kind="assignment" x="-204" y="51">ACK[current] = 0</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-51" y="178">UTCH[current]?</label>
			<nail x="-51" y="204"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-170" y="127">UCCH[current]?</label>
			<nail x="-170" y="127"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-331" y="-76">schedule[id]!</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-42" y="-17">BCH!</label>
			<label kind="assignment" x="-42" y="0">slot = 0,
x = 0</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-178" y="-76">scheduled[id]?</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id7"/>
			<label kind="assignment" x="-365" y="-136">x = 0</label>
		</transition>
	</template>
	<template>
		<name>UserStates</name>
		<parameter>int id</parameter>
		<declaration>clock offset;    // timer for start offset</declaration>
		<location id="id11" x="-15130" y="-15181">
			<name x="-15138" y="-15232">INIT</name>
			<label kind="invariant" x="-15155" y="-15215">offset' == 1</label>
		</location>
		<location id="id12" x="-15130" y="-14942">
			<name x="-15240" y="-14943">LISTEN_ONLY</name>
		</location>
		<location id="id13" x="-14832" y="-14942">
			<name x="-14815" y="-14951">STREAMING</name>
		</location>
		<location id="id14" x="-14985" y="-15028">
			<name x="-15011" y="-15062">FAILED</name>
			<urgent/>
		</location>
		<location id="id15" x="-14985" y="-14815">
			<name x="-15019" y="-14849">SLEEPING</name>
		</location>
		<location id="id16" x="-14832" y="-15181">
			<name x="-14815" y="-15190">DISCONNECTED</name>
			<urgent/>
		</location>
		<location id="id17" x="-15130" y="-15096">
			<name x="-15113" y="-15105">CONNECTING</name>
			<label kind="invariant" x="-15113" y="-15088">offset' == 0</label>
		</location>
		<init ref="id11"/>
		<transition>
			<source ref="id17"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-15249" y="-15164">disconnected[id]?</label>
			<label kind="assignment" x="-15249" y="-15147">offset = 0</label>
			<nail x="-15257" y="-15096"/>
			<nail x="-15257" y="-15181"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-15232" y="-15028">connected[id]?</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id12"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="-15266" y="-15266">disconnected[id]?</label>
			<nail x="-15266" y="-14943"/>
			<nail x="-15266" y="-15240"/>
			<nail x="-14832" y="-15240"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id11"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="-14832" y="-15078">disconnected[id]?</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id13"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-14943" y="-14866">wake_up[id]?</label>
			<nail x="-14858" y="-14849"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-15096" y="-14866">wake_up[id]?</label>
			<nail x="-15104" y="-14849"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-14900" y="-14832">sleep[id]?</label>
			<nail x="-14832" y="-14815"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-15112" y="-14832">sleep[id]?</label>
			<nail x="-15130" y="-14815"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-15087" y="-15045">failed[id]?</label>
			<nail x="-15104" y="-15028"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-14926" y="-15045">failed[id]?</label>
			<nail x="-14858" y="-15028"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-15036" y="-14909">stop_sample[id]?</label>
			<nail x="-14909" y="-14891"/>
			<nail x="-15070" y="-14891"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-15028" y="-14960">stream[id]?</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id17"/>
			<label kind="guard" x="-15121" y="-15147">offset &gt; start_offset[id]</label>
			<label kind="synchronisation" x="-15121" y="-15130">started[id]!</label>
		</transition>
	</template>
	<template>
		<name>UserListenOnly</name>
		<parameter>int id</parameter>
		<declaration>clock x;    // timer for latency

clock y;    // timer for sleep

clock z;    // timer for disconnect

bool dedicated_channel_set = false;    // 0 - false, 1 - true

int latency;    // passable latency for UCCH control commands (DLC/MAC)

//int prob_failure = channel_interference_probability[id][0];
int prob_failure = 25;

//int prob_success = channel_interference_probability[id][1];
int prob_success = 75;</declaration>
		<location id="id18" x="-1368" y="-654">
			<name x="-1411" y="-637">INITIAL</name>
			<label kind="invariant" x="-1411" y="-620">x' == 0 &amp;&amp;
y' == 0 &amp;&amp;
z' == 0</label>
		</location>
		<location id="id19" x="-731" y="-654">
			<name x="-850" y="-646">BCH_RECEIVED</name>
			<urgent/>
		</location>
		<location id="id20" x="-731" y="-884">
			<name x="-765" y="-918">META_DATA</name>
			<urgent/>
		</location>
		<location id="id21" x="-1071" y="-561">
			<name x="-1088" y="-544">DL_NACK</name>
			<label kind="invariant" x="-1088" y="-527">z' == 0</label>
			<urgent/>
		</location>
		<location id="id22" x="-1199" y="-655">
			<name x="-1283" y="-697">WAIT_BCH</name>
			<label kind="invariant" x="-1283" y="-680">x &lt;= latency</label>
		</location>
		<location id="id23" x="-1198" y="-561">
			<name x="-1215" y="-544">FAIL</name>
			<urgent/>
		</location>
		<location id="id24" x="-1199" y="-892">
			<name x="-1250" y="-926">DSICONNECT</name>
			<urgent/>
		</location>
		<location id="id25" x="-986" y="-884">
			<name x="-996" y="-918">TRANSMIT</name>
			<urgent/>
		</location>
		<location id="id26" x="-544" y="-654">
			<name x="-527" y="-688">UL_ACK</name>
			<label kind="invariant" x="-527" y="-671">y' == 1</label>
			<urgent/>
		</location>
		<location id="id27" x="-731" y="-773">
			<name x="-816" y="-782">UL_NACK</name>
			<urgent/>
		</location>
		<location id="id28" x="-544" y="-561">
			<name x="-527" y="-569">SLEEP</name>
			<label kind="invariant" x="-527" y="-553">y &lt;= sleep_time[id]</label>
			<urgent/>
		</location>
		<location id="id29" x="-459" y="-774">
			<name x="-442" y="-782">STREAM</name>
			<urgent/>
		</location>
		<location id="id30" x="-850" y="-561">
			<label kind="invariant" x="-875" y="-544">y' == 0</label>
			<urgent/>
		</location>
		<branchpoint id="id31" x="-986" y="-825">
		</branchpoint>
		<init ref="id18"/>
		<transition>
			<source ref="id30"/>
			<target ref="id22"/>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id18"/>
			<label kind="synchronisation" x="-578" y="-926">disconnected[id]?</label>
			<label kind="assignment" x="-1445" y="-926">z = 0,
x = 0</label>
			<nail x="-459" y="-926"/>
			<nail x="-1401" y="-925"/>
			<nail x="-1401" y="-653"/>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id29"/>
			<label kind="guard" x="-705" y="-833">dedicated_channel_set == 1 &amp;&amp;
profile[id] == RTa ||
profile[id] == HqRTa</label>
			<label kind="synchronisation" x="-705" y="-774">stream[id]!</label>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id22"/>
			<label kind="probability" x="-1096" y="-850">prob_failure</label>
			<nail x="-1113" y="-825"/>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id22"/>
			<label kind="synchronisation" x="-977" y="-782">UCCH[id]!</label>
			<label kind="assignment" x="-977" y="-748">dedicated_channel_set = 1</label>
			<label kind="probability" x="-977" y="-765">prob_success</label>
			<nail x="-986" y="-714"/>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id31"/>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id18"/>
			<label kind="assignment" x="-1360" y="-892">z = 0,
x = 0</label>
			<nail x="-1367" y="-891"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id22"/>
			<label kind="synchronisation" x="-1335" y="-655">connected[id]?</label>
			<label kind="assignment" x="-1334" y="-637">x = 0</label>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id30"/>
			<label kind="guard" x="-688" y="-586">y &gt;= sleep_time[id]</label>
			<label kind="assignment" x="-603" y="-561">y = 0</label>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id28"/>
			<label kind="assignment" x="-535" y="-629">y = 0</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id27"/>
			<label kind="guard" x="-722" y="-722">ACK[id] == 0</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id26"/>
			<label kind="guard" x="-688" y="-680">ACK[id] == 1</label>
			<label kind="assignment" x="-688" y="-654">x = 0</label>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id25"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id22"/>
			<nail x="-1071" y="-603"/>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="-977" y="-672">BCH?</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id21"/>
			<label kind="assignment" x="-1156" y="-561">z = x</label>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id23"/>
			<label kind="guard" x="-1190" y="-612">x &gt; latency</label>
			<label kind="synchronisation" x="-1190" y="-595">failed[id]!</label>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id24"/>
			<label kind="guard" x="-1351" y="-765">z &gt; disconnect_timeout</label>
			<label kind="synchronisation" x="-1317" y="-782">disconnected[id]!</label>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id20"/>
		</transition>
	</template>
	<template>
		<name>UserConnect</name>
		<parameter>int id</parameter>
		<declaration>int i = 0;    // channel scan counter

int j = 0;    // re-try scan counter

int number_channels = 10;    // number of hard-coded channels to scan through

int channels[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};    // channel frequencies to scan for BS down-link reception

int channel_stability_latency = 0;    // time to test channel stability before connecting to the BS as LISTEN_ONLY UE

clock x;

// int prob_stable = connection_channel_stability[id][1];
int prob_stable = 75;

// int prob_unstable = connection_channel_stability[id][0];
int prob_unstable = 25;

int number_retries = 10;    // number of allowed retries of channel scanning before going to the INITIAL state</declaration>
		<location id="id32" x="-2856" y="-3111">
			<name x="-2915" y="-3136">INITIAL</name>
		</location>
		<location id="id33" x="-2856" y="-2813">
			<name x="-2839" y="-2830">TESTING_CHANNEL</name>
			<label kind="invariant" x="-2839" y="-2813">x &lt;= channel_stability_latency</label>
		</location>
		<location id="id34" x="-2856" y="-2983">
			<name x="-2847" y="-3017">SCANNING</name>
			<urgent/>
		</location>
		<location id="id35" x="-2371" y="-3145">
			<name x="-2405" y="-3178">CONNECTED</name>
			<urgent/>
		</location>
		<location id="id36" x="-2575" y="-2652">
			<name x="-2618" y="-2703">WAIT_BCH</name>
			<label kind="invariant" x="-2652" y="-2686">x &lt;= disconnect_timeout</label>
		</location>
		<location id="id37" x="-2575" y="-2541">
			<name x="-2609" y="-2524">TRANSMIT</name>
			<label kind="invariant" x="-2618" y="-2507">x &lt;= RACH_size</label>
		</location>
		<location id="id38" x="-2371" y="-2652">
			<name x="-2354" y="-2660">BCH_RECEIVED</name>
			<urgent/>
		</location>
		<location id="id39" x="-2371" y="-2541">
			<label kind="invariant" x="-2354" y="-2550">x &lt;= RACH_start</label>
		</location>
		<branchpoint id="id40" x="-2856" y="-2652">
		</branchpoint>
		<init ref="id32"/>
		<transition>
			<source ref="id37"/>
			<target ref="id36"/>
			<label kind="guard" x="-2728" y="-2584">x &gt; RACH_size</label>
			<label kind="assignment" x="-2728" y="-2567">x = 0</label>
			<nail x="-2737" y="-2541"/>
			<nail x="-2737" y="-2609"/>
		</transition>
		<transition>
			<source ref="id39"/>
			<target ref="id37"/>
			<label kind="guard" x="-2524" y="-2541">x &gt;= RACH_start</label>
		</transition>
		<transition>
			<source ref="id36"/>
			<target ref="id38"/>
			<label kind="guard" x="-2550" y="-2652">x &lt; disconnect_timeout</label>
			<label kind="synchronisation" x="-2490" y="-2677">BCH?</label>
			<nail x="-2567" y="-2652"/>
		</transition>
		<transition>
			<source ref="id36"/>
			<target ref="id32"/>
			<label kind="guard" x="-2567" y="-3094">x &gt;= disconnect_timeout</label>
			<label kind="synchronisation" x="-2567" y="-3111">disconnected[id]!</label>
			<nail x="-2575" y="-3111"/>
		</transition>
		<transition>
			<source ref="id38"/>
			<target ref="id35"/>
			<label kind="guard" x="-2363" y="-2779">ACK[id] == 1</label>
		</transition>
		<transition>
			<source ref="id37"/>
			<target ref="id36"/>
			<label kind="guard" x="-2567" y="-2626">x &lt;= RACH_size</label>
			<label kind="synchronisation" x="-2567" y="-2609">RACH!</label>
			<label kind="assignment" x="-2567" y="-2592">RACH_id = id,
x = 0</label>
		</transition>
		<transition>
			<source ref="id38"/>
			<target ref="id39"/>
			<label kind="guard" x="-2363" y="-2626">ACK[id] == 0</label>
			<label kind="assignment" x="-2363" y="-2601">x = 0</label>
		</transition>
		<transition>
			<source ref="id35"/>
			<target ref="id32"/>
			<label kind="synchronisation" x="-2643" y="-3170">connected[id]!</label>
			<nail x="-2856" y="-3145"/>
		</transition>
		<transition>
			<source ref="id34"/>
			<target ref="id34"/>
			<label kind="guard" x="-2745" y="-2983">i &gt; number_channels &amp;&amp;
j &lt; number_retries</label>
			<label kind="assignment" x="-2745" y="-2949">i = 0,
j++</label>
			<nail x="-2754" y="-2983"/>
			<nail x="-2754" y="-2907"/>
		</transition>
		<transition>
			<source ref="id34"/>
			<target ref="id32"/>
			<label kind="guard" x="-3043" y="-3103">j &gt;= number_retries</label>
			<label kind="synchronisation" x="-3043" y="-3120">disconnected[id]!</label>
			<label kind="assignment" x="-3043" y="-3085">i = 0,
j = 0</label>
			<nail x="-2932" y="-3112"/>
		</transition>
		<transition>
			<source ref="id34"/>
			<target ref="id34"/>
			<label kind="guard" x="-3111" y="-2983">channels[i] != broadcast_channel</label>
			<label kind="assignment" x="-3111" y="-2966">i++</label>
			<nail x="-3120" y="-2983"/>
			<nail x="-3120" y="-2864"/>
		</transition>
		<transition>
			<source ref="id34"/>
			<target ref="id33"/>
			<label kind="guard" x="-2847" y="-2898">channels[i] == broadcast_channel</label>
			<label kind="assignment" x="-2847" y="-2881">x = 0</label>
		</transition>
		<transition>
			<source ref="id40"/>
			<target ref="id34"/>
			<label kind="probability" x="-2966" y="-2669">prob_unstable</label>
			<nail x="-2992" y="-2652"/>
		</transition>
		<transition>
			<source ref="id40"/>
			<target ref="id36"/>
			<label kind="assignment" x="-2839" y="-2652">i = 0,
j = 0</label>
			<label kind="probability" x="-2839" y="-2669">prob_stable</label>
		</transition>
		<transition>
			<source ref="id33"/>
			<target ref="id40"/>
			<label kind="guard" x="-2847" y="-2762">x &gt;= channel_stability_latency</label>
			<label kind="assignment" x="-2847" y="-2745">x = 0</label>
		</transition>
		<transition>
			<source ref="id32"/>
			<target ref="id34"/>
			<label kind="synchronisation" x="-2847" y="-3103">started[id]?</label>
			<label kind="assignment" x="-2847" y="-3086">i = 0,
j = 0</label>
		</transition>
	</template>
	<template>
		<name>UserStream</name>
		<parameter>int id, int dma_latency</parameter>
		<declaration>clock x, y;

int max_lat;    // max latency

int transmission_latency;    // latency of data transmission

int disconnect_timeout;    // time of no DL received before disconnecting (e.g., 5 sec)

int latency;    // passable latency for UTCH audio transmission

int qca_latency;</declaration>
		<location id="id41" x="-1309" y="-935">
			<name x="-1334" y="-969">INITIAL</name>
		</location>
		<location id="id42" x="-1156" y="-638">
			<name x="-1241" y="-638">WAIT_BCH</name>
			<label kind="invariant" x="-1215" y="-620">y' == 1</label>
		</location>
		<location id="id43" x="-1020" y="-578">
			<name x="-1003" y="-587">FAILED</name>
			<urgent/>
		</location>
		<location id="id44" x="-1504" y="-935">
			<name x="-1615" y="-943">DISCONNECT</name>
			<label kind="invariant" x="-1572" y="-926">y' == 0</label>
			<urgent/>
		</location>
		<location id="id45" x="-1156" y="-935">
		</location>
		<location id="id46" x="-994" y="-935">
			<name x="-977" y="-960">LOAD_FROM_MEM</name>
			<label kind="invariant" x="-977" y="-943">x &lt;= dma_latency</label>
		</location>
		<location id="id47" x="-841" y="-1020">
			<name x="-892" y="-1071">WAIT_SAMPLE</name>
			<label kind="invariant" x="-892" y="-1054">y &lt; slot_start[id]</label>
		</location>
		<location id="id48" x="-1156" y="-748">
			<name x="-1249" y="-765">TRANSMIT</name>
			<label kind="invariant" x="-1343" y="-748">x &lt;= transmission_latency</label>
		</location>
		<location id="id49" x="-1402" y="-739">
			<name x="-1470" y="-747">UL_ACK</name>
			<urgent/>
		</location>
		<location id="id50" x="-1402" y="-816">
			<name x="-1462" y="-824">SLEEP</name>
			<label kind="invariant" x="-1538" y="-807">y &lt;= sleep_time[id]</label>
		</location>
		<location id="id51" x="-1054" y="-689">
			<name x="-1062" y="-723">UL_NACK</name>
			<urgent/>
		</location>
		<location id="id52" x="-1156" y="-536">
			<name x="-1207" y="-519">BCH_RECEIVED</name>
			<urgent/>
		</location>
		<location id="id53" x="-1156" y="-824">
			<name x="-1283" y="-841">QCA_PROCESS</name>
			<label kind="invariant" x="-1283" y="-824">y &lt;= qca_latency</label>
		</location>
		<init ref="id41"/>
		<transition>
			<source ref="id53"/>
			<target ref="id48"/>
			<label kind="guard" x="-1147" y="-807">y &gt; qca_latency</label>
			<label kind="assignment" x="-1147" y="-790">x = 0</label>
		</transition>
		<transition>
			<source ref="id42"/>
			<target ref="id52"/>
			<label kind="synchronisation" x="-1198" y="-587">BCH?</label>
		</transition>
		<transition>
			<source ref="id51"/>
			<target ref="id48"/>
		</transition>
		<transition>
			<source ref="id52"/>
			<target ref="id51"/>
			<label kind="guard" x="-1028" y="-536">ACK[id] == 0</label>
			<nail x="-926" y="-536"/>
			<nail x="-926" y="-689"/>
		</transition>
		<transition>
			<source ref="id50"/>
			<target ref="id45"/>
			<label kind="guard" x="-1402" y="-910">y &gt; sleep_time[id]</label>
			<nail x="-1402" y="-884"/>
			<nail x="-1207" y="-884"/>
		</transition>
		<transition>
			<source ref="id49"/>
			<target ref="id50"/>
			<label kind="assignment" x="-1445" y="-782">y = 0</label>
		</transition>
		<transition>
			<source ref="id52"/>
			<target ref="id49"/>
			<label kind="guard" x="-1394" y="-535">ACK[id] == 1</label>
			<nail x="-1402" y="-535"/>
		</transition>
		<transition>
			<source ref="id48"/>
			<target ref="id42"/>
			<label kind="guard" x="-1317" y="-705">x &gt; transmission_latency</label>
			<label kind="synchronisation" x="-1224" y="-722">UTCH[id]!</label>
		</transition>
		<transition>
			<source ref="id47"/>
			<target ref="id53"/>
			<label kind="guard" x="-952" y="-824">y &gt;= slot_start[id]</label>
			<label kind="assignment" x="-884" y="-807">y = 0</label>
			<nail x="-841" y="-824"/>
		</transition>
		<transition>
			<source ref="id45"/>
			<target ref="id53"/>
			<label kind="guard" x="-1266" y="-884">y &gt;= slot_start[id]</label>
			<label kind="assignment" x="-1190" y="-867">y = 0</label>
		</transition>
		<transition>
			<source ref="id46"/>
			<target ref="id45"/>
			<label kind="guard" x="-1105" y="-901">x &gt; dma_latency</label>
			<nail x="-994" y="-875"/>
			<nail x="-1105" y="-875"/>
		</transition>
		<transition>
			<source ref="id47"/>
			<target ref="id46"/>
			<label kind="synchronisation" x="-994" y="-1003">sample_ready[id]?</label>
			<nail x="-875" y="-977"/>
			<nail x="-994" y="-977"/>
		</transition>
		<transition>
			<source ref="id45"/>
			<target ref="id47"/>
			<label kind="guard" x="-1156" y="-1062">samples_ready[id] == 0 &amp;&amp;
y &lt; slot_start[id]</label>
			<nail x="-1156" y="-1020"/>
		</transition>
		<transition>
			<source ref="id45"/>
			<target ref="id46"/>
			<label kind="guard" x="-1130" y="-960">y &lt; slot_start[id]</label>
			<label kind="assignment" x="-1130" y="-935">x = 0</label>
		</transition>
		<transition>
			<source ref="id44"/>
			<target ref="id41"/>
			<label kind="synchronisation" x="-1462" y="-960">disconnected[id]!</label>
		</transition>
		<transition>
			<source ref="id42"/>
			<target ref="id44"/>
			<label kind="guard" x="-1504" y="-637">y &gt; disconnect_timeout</label>
			<label kind="assignment" x="-1504" y="-620">y = 0</label>
			<nail x="-1504" y="-637"/>
		</transition>
		<transition>
			<source ref="id43"/>
			<target ref="id42"/>
			<label kind="synchronisation" x="-1105" y="-595">failed[id]!</label>
			<nail x="-1113" y="-578"/>
		</transition>
		<transition>
			<source ref="id42"/>
			<target ref="id43"/>
			<label kind="guard" x="-1011" y="-638">y &gt; max_lat &amp;&amp;
y &lt;= disconnect_timeout</label>
			<nail x="-1020" y="-638"/>
		</transition>
		<transition>
			<source ref="id41"/>
			<target ref="id45"/>
			<label kind="synchronisation" x="-1266" y="-960">stream[id]?</label>
			<label kind="assignment" x="-1266" y="-935">x = 0,
y = 0</label>
		</transition>
	</template>
	<template>
		<name>UserSample</name>
		<parameter>int id, int audio_quality, int bit_depth, int codec_latency, int dma_latency</parameter>
		<declaration>// id: UE identification number
// audio_quality: audio sampling rate (kHz or kbps)
// bit_depth: bits per sample

clock x;

// Assumption: codecs used are sample-based (not frame-based)

// if audio quality in sample rate (kHz)
//int sample_rate = audio_quality/unit;    // samples per (ms * unit)
//int time_per_sample = (int)ceil(1/sample_rate);    // one sample in (ms * unit) - ROUNDED to a higher value

// if audio quality in bit rate (kbps)
//int time_per_sample = (audio_quality/bit_depth)/unit;    // samples per (ms * unit);
int time_per_sample = 1;

</declaration>
		<location id="id54" x="-662" y="-654">
			<name x="-688" y="-722">SAMPLE</name>
			<label kind="invariant" x="-688" y="-705">x' == 1 &amp;&amp;
x &lt;= time_per_sample</label>
		</location>
		<location id="id55" x="-416" y="-654">
			<name x="-484" y="-705">PROCESS_CODEC</name>
			<label kind="invariant" x="-476" y="-688">x &lt;= codec_latency</label>
		</location>
		<location id="id56" x="-892" y="-654">
			<name x="-918" y="-705">INITIAL</name>
			<label kind="invariant" x="-918" y="-688">x' == 0</label>
		</location>
		<location id="id57" x="-416" y="-569">
			<name x="-399" y="-578">LOAD_TO_MEM</name>
			<label kind="invariant" x="-399" y="-561">x &lt;= dma_latency</label>
		</location>
		<location id="id58" x="-892" y="-569">
			<name x="-986" y="-578">STOPPING</name>
			<urgent/>
		</location>
		<init ref="id56"/>
		<transition>
			<source ref="id54"/>
			<target ref="id58"/>
			<label kind="synchronisation" x="-850" y="-518">disconnected[id]?</label>
			<nail x="-697" y="-518"/>
			<nail x="-892" y="-518"/>
		</transition>
		<transition>
			<source ref="id54"/>
			<target ref="id58"/>
			<label kind="synchronisation" x="-850" y="-569">stop_sample[id]?</label>
			<nail x="-697" y="-569"/>
		</transition>
		<transition>
			<source ref="id57"/>
			<target ref="id54"/>
			<label kind="guard" x="-629" y="-552">x &gt; dma_latency</label>
			<label kind="synchronisation" x="-629" y="-569">sample_ready[id]!</label>
			<label kind="assignment" x="-629" y="-535">samples_ready[id] += 1,
x = 0</label>
			<nail x="-637" y="-569"/>
		</transition>
		<transition>
			<source ref="id55"/>
			<target ref="id57"/>
			<label kind="guard" x="-408" y="-637">x &gt; codec_latency</label>
			<label kind="assignment" x="-408" y="-620">x = 0</label>
		</transition>
		<transition>
			<source ref="id58"/>
			<target ref="id56"/>
			<label kind="assignment" x="-926" y="-620">x = 0</label>
		</transition>
		<transition>
			<source ref="id56"/>
			<target ref="id54"/>
			<label kind="synchronisation" x="-824" y="-680">sample[id]?</label>
			<label kind="assignment" x="-824" y="-654">x = 0</label>
		</transition>
		<transition>
			<source ref="id54"/>
			<target ref="id55"/>
			<label kind="guard" x="-620" y="-654">x &gt; time_per_sample</label>
			<label kind="assignment" x="-620" y="-637">x = 0</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
usr_1 = UserStates(0);
usr_1c = UserConnect(0);
usr_1lt = UserListenOnly(0);

bs_1 = BaseStation(0);
bs_1s = Scheduler(0);
// List one or more processes to be composed into a system.
system usr_1, usr_1c, usr_1lt, bs_1, bs_1s;
    </system>
	<queries>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
	</queries>
</nta>
